import { NestFactory } from '@nestjs/core';
import { ValidationPipe, Logger } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { TransformInterceptor } from './common/interceptors/transform.interceptor';
import { LoggingInterceptor } from './common/interceptors/logging.interceptor';
import { HttpExceptionFilter } from './common/filters/http-exception.filter';
import { AllExceptionsFilter } from './common/filters/all-exceptions.filter';
import { ConfigService } from '@nestjs/config';

async function bootstrap() {
  const logger = new Logger('Bootstrap');
  
  const app = await NestFactory.create(AppModule, {
    logger: ['error', 'warn', 'log', 'debug', 'verbose'],
  });
  
  const configService = app.get(ConfigService);

  logger.log('üîß Initializing CookTip Backend...');

  // ËÆæÁΩÆÂÖ®Â±ÄÂâçÁºÄÔºàÊéíÈô§ÂÅ•Â∫∑Ê£ÄÊü•Ë∑ØÂæÑÔºâ
  const apiPrefix = configService.get('API_PREFIX') || 'api/v1';
  app.setGlobalPrefix(apiPrefix, {
    exclude: ['/', 'health'],
  });

  // ÂêØÁî®CORS
  app.enableCors({
    origin: true,
    credentials: true,
  });

  // ÂÖ®Â±ÄÈ™åËØÅÁÆ°ÈÅì
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );

  // ÂÖ®Â±ÄÊã¶Êà™Âô® - ÊåâÈ°∫Â∫èÊâßË°å
  app.useGlobalInterceptors(
    new LoggingInterceptor(),  // Êó•ÂøóÊã¶Êà™Âô®ÔºàÁ¨¨‰∏Ä‰∏™Ôºâ
    new TransformInterceptor(), // ÂìçÂ∫îËΩ¨Êç¢Êã¶Êà™Âô®
  );

  // ÂÖ®Â±ÄÂºÇÂ∏∏ËøáÊª§Âô® - AllExceptionsFilter ÂøÖÈ°ªÊúÄÂÖàÊ≥®ÂÜå
  app.useGlobalFilters(
    new AllExceptionsFilter(),  // ÊçïËé∑ÊâÄÊúâÂºÇÂ∏∏ÔºàÂåÖÊã¨Êú™Â§ÑÁêÜÁöÑÈîôËØØÔºâ
    new HttpExceptionFilter(),  // HTTPÂºÇÂ∏∏ËøáÊª§Âô®
  );

  // SwaggerÊñáÊ°£ÈÖçÁΩÆ
  const config = new DocumentBuilder()
    .setTitle('CookTip API')
    .setDescription('CookTip ÁæéÈ£üËèúË∞±Â∞èÁ®ãÂ∫èÂêéÁ´ØAPIÊñáÊ°£')
    .setVersion('1.0')
    .addBearerAuth()
    .addTag('ËÆ§ËØÅÊ®°Âùó', 'ÂæÆ‰ø°ÁôªÂΩï„ÄÅTokenÂà∑Êñ∞„ÄÅÈÄÄÂá∫ÁôªÂΩï')
    .addTag('Áî®Êà∑Ê®°Âùó', 'Áî®Êà∑‰ø°ÊÅØÁÆ°ÁêÜ')
    .addTag('È£üË∞±Ê®°Âùó', 'È£üË∞±CRUD„ÄÅÁÇπËµû„ÄÅÊî∂Ëóè')
    .addTag('ËØÑËÆ∫Ê®°Âùó', 'ËØÑËÆ∫ÁÆ°ÁêÜ')
    .addTag('Êî∂ËóèÊ®°Âùó', 'Êî∂ËóèÁÆ°ÁêÜ')
    .addTag('ÊêúÁ¥¢Ê®°Âùó', 'È£üË∞±ÊêúÁ¥¢')
    .addTag('Ë¥≠Áâ©Ê∏ÖÂçïÊ®°Âùó', 'Ë¥≠Áâ©Ê∏ÖÂçïÁÆ°ÁêÜ')
    .addTag('ÂàÜÁ±ªÊ®°Âùó', 'ÂàÜÁ±ªÁÆ°ÁêÜ')
    .addTag('Êñá‰ª∂‰∏ä‰º†Ê®°Âùó', 'ÂõæÁâá‰∏ä‰º†')
    .addTag('ÁªüËÆ°Ê®°Âùó', 'Êï∞ÊçÆÁªüËÆ°')
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);

  const port = configService.get('PORT') || 3000;
  await app.listen(port);
  
  logger.log(`üöÄ Application is running on: http://localhost:${port}`);
  logger.log(`üìö API Documentation: http://localhost:${port}/api/docs`);
  logger.log(`üîç Environment: ${process.env.NODE_ENV || 'development'}`);
  logger.log(`‚úÖ CookTip Backend started successfully!`);
}

bootstrap().catch((err) => {
  const logger = new Logger('Bootstrap');
  logger.error('‚ùå Failed to start application:', err);
  logger.error(err.stack);
  process.exit(1);
});

